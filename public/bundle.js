(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// const src = "http://localhost:8080/"
const API = {
  getPointsOfInterest: () => {
    return fetch("http://localhost:8088/places?_embed=interests").then(response => response.json());
  },
  getPlaces: () => {
    return fetch("http://localhost:8088/places").then(resp => resp.json());
  },
  getOnePointOfInterest: pointId => {
    return fetch(`http://localhost:8088/events/${pointId}`).then(response => response.json());
  },
  addPointofInterest: obj => {
    return fetch("http://localhost:8088/interests", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(obj)
    }).then(response => response.json());
  },
  editPointsOfInterest: obj => {
    return fetch(`http://localhost:8088/interests/${obj.id}`, {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(obj)
    }).then(response => response.json());
  },
  deletePointOfInterest: pointsId => {
    return fetch(`http://localhost:8088/interests/${pointsId}`, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json"
      }
    }).then(response => response.json());
  }
};
var _default = API;
exports.default = _default;

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createForm;

var _DBcalls = _interopRequireDefault(require("./DBcalls"));

var _refreshDom = _interopRequireDefault(require("./refreshDom"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createForm() {
  // const mainDiv = document.querySelector("#main_div")
  const formDiv = document.createElement("div");

  _DBcalls.default.getPlaces().then(places => {
    const nameInput = document.createElement("input");
    nameInput.setAttribute("id", "name");
    const costInput = document.createElement("input");
    costInput.setAttribute("id", "cost");
    const descInput = document.createElement("input");
    descInput.setAttribute("id", "desc");
    const dropDown = document.createElement("select");
    const saveBtn = document.createElement("button");
    saveBtn.innerHTML = "Save";
    saveBtn.addEventListener("click", () => {
      let intObject = {
        name: `${nameInput.value}`,
        cost: `${costInput.value}`,
        description: `${descInput.value}`,
        review: "",
        placeId: parseInt(dropDown.value)
      };

      _DBcalls.default.addPointofInterest(intObject).then(res => (0, _refreshDom.default)());
    });
    places.forEach(place => {
      let option = document.createElement("option");
      option.text = `${place.name}`;
      option.value = `${place.id}`;
      dropDown.add(option);
    });
    formDiv.appendChild(nameInput);
    formDiv.appendChild(costInput);
    formDiv.appendChild(descInput);
    formDiv.appendChild(dropDown);
    formDiv.appendChild(saveBtn); // mainDiv.appendChild(formDiv)
  });

  return formDiv;
}

},{"./DBcalls":1,"./refreshDom":6}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = deleteFromDb;

var _DBcalls = _interopRequireDefault(require("./DBcalls"));

var _refreshDom = _interopRequireDefault(require("./refreshDom"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function deleteFromDb(interestId) {
  _DBcalls.default.deletePointOfInterest(interestId).then(res => (0, _refreshDom.default)());
}

},{"./DBcalls":1,"./refreshDom":6}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = editPoint;

var _DBcalls = _interopRequireDefault(require("./DBcalls"));

var _refreshDom = _interopRequireDefault(require("./refreshDom"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function editPoint(pointId, interest) {
  let pointDiv = document.getElementById(`${pointId}`);
  pointDiv.innerHTML = "";
  let text = document.createElement("h3");
  text.innerHTML = `Edit ${interest.name}`;
  let costInput = document.createElement("input");
  let reviewInput = document.createElement("input");
  let saveBtn = document.createElement("button");
  saveBtn.innerHTML = "Save";
  costInput.value = interest.cost;
  pointDiv.appendChild(text);
  pointDiv.appendChild(costInput);
  pointDiv.appendChild(reviewInput);
  pointDiv.appendChild(saveBtn);
  saveBtn.addEventListener("click", () => {
    interest.cost = costInput ? costInput.value : interest.cost;
    interest.review = reviewInput.value;

    _DBcalls.default.editPointsOfInterest(interest).then(res => (0, _refreshDom.default)());
  });
}

},{"./DBcalls":1,"./refreshDom":6}],5:[function(require,module,exports){
"use strict";

var _DBcalls = _interopRequireDefault(require("./DBcalls"));

var _createForm = _interopRequireDefault(require("./createForm"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mainDiv = document.querySelector("#main_div"); //Create Form to add interest

mainDiv.appendChild((0, _createForm.default)()); //Get all places with interests embedded and print to dom

_DBcalls.default.getPointsOfInterest().then(placesAndInterests => {
  placesAndInterests.forEach(place => {
    let placeDiv = document.createElement("div");
    placeDiv.setAttribute("id", place.name);
    placeDiv.setAttribute("class", "place-card");
    let placeName = document.createElement("h2");
    placeName.innerHTML = place.name;
    placeDiv.appendChild(placeName); //function to loop through each places interest and append to place div

    place.interests.forEach(interest => {
      let intDiv = document.createElement("div");
      intDiv.setAttribute("id", `${interest.id}`);
      let intName = document.createElement("h4");
      intName.innerHTML = `${interest.name}`;
      let intDesc = document.createElement("p");
      intDesc.innerHTML = `${interest.description}`;
      let intCost = document.createElement("p");
      intCost.innerHTML = `${interest.cost}`;
      let intReview = document.createElement("p");
      intReview.innerHTML = interest.review ? `${interest.review}` : "No Review Yet";
      let editBtn = document.createElement("button");
      editBtn.innerHTML = "Edit";
      let delBtn = document.createElement("button");
      delBtn.innerHTML = "Delete";
      delBtn.addEventListener("click", event => deleteInterest(event.target.parentNode.id));
      intDiv.appendChild(intName);
      intDiv.appendChild(intDesc);
      intDiv.appendChild(intCost);
      intDiv.appendChild(intReview);
      intDiv.appendChild(editBtn);
      intDiv.appendChild(delBtn);
      placeDiv.appendChild(intDiv);
    }); //append place div to main div

    mainDiv.appendChild(placeDiv);
  });
});

},{"./DBcalls":1,"./createForm":2}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = clearDom;

var _DBcalls = _interopRequireDefault(require("./DBcalls"));

var _createForm = _interopRequireDefault(require("./createForm"));

var _deleteFromDb = _interopRequireDefault(require("./deleteFromDb"));

var _editPoints = _interopRequireDefault(require("./editPoints"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function clearDom() {
  const mainDiv = document.querySelector("#main_div");
  mainDiv.innerHTML = "";
  mainDiv.appendChild((0, _createForm.default)()); //Get all places with interests embedded and print to dom

  _DBcalls.default.getPointsOfInterest().then(placesAndInterests => {
    placesAndInterests.forEach(place => {
      let placeDiv = document.createElement("div");
      placeDiv.setAttribute("id", place.name);
      placeDiv.setAttribute("class", "place-card");
      let placeName = document.createElement("h2");
      placeName.innerHTML = place.name;
      placeDiv.appendChild(placeName); //function to loop through each places interest and append to place div

      place.interests.forEach(interest => {
        let intDiv = document.createElement("div");
        intDiv.setAttribute("id", `${interest.id}`);
        let intName = document.createElement("h4");
        intName.innerHTML = `${interest.name}`;
        let intDesc = document.createElement("p");
        intDesc.innerHTML = `${interest.description}`;
        let intCost = document.createElement("p");
        intCost.innerHTML = `${interest.cost}`;
        let intReview = document.createElement("p");
        intReview.innerHTML = interest.review ? `${interest.review}` : "No Review Yet";
        let editBtn = document.createElement("button");
        editBtn.innerHTML = "Edit";
        editBtn.addEventListener("click", evt => (0, _editPoints.default)(evt.target.parentNode.id, interest));
        let delBtn = document.createElement("button");
        delBtn.innerHTML = "Delete";
        delBtn.addEventListener("click", evt => (0, _deleteFromDb.default)(evt.target.parentNode.id));
        intDiv.appendChild(intName);
        intDiv.appendChild(intDesc);
        intDiv.appendChild(intCost);
        intDiv.appendChild(intReview);
        intDiv.appendChild(editBtn);
        intDiv.appendChild(delBtn);
        placeDiv.appendChild(intDiv);
      }); //append place div to main div

      mainDiv.appendChild(placeDiv);
    });
  });
}

},{"./DBcalls":1,"./createForm":2,"./deleteFromDb":3,"./editPoints":4}]},{},[5])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
